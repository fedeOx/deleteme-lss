if: repo != head_repo # rendo tutta la build condizionale. In particolare, disabilito la build per le pull request interne.

_reference_os: &reference_os # creo un puntatore alla chiave custom creata "_reference_os". I puntatori possono puntare qualsiasi cosa, quando faccio *puntatore mi porto dietro tutto ciò che è puntato.
  linux
_reference_arch: &reference_arch
  amd64
_reference_jdk: &reference_jdk
  JDK="adopt@1.11"

language: minimal

git:
  depth: false
  autocrlf: input

os:
  - *reference_os
  - osx
  - windows

dist: focal # "dist" definisce la distribuzione di linux

#osx_image: xcode9.4 # "osx_image" definisce la distribuzione di osx

arch:
  - *reference_arch
  - arm64

env:
  global: # variabili globali che valgono per tutti i jobs
    - GRAVIS_REPO="https://github.com/DanySK/Gravis-CI.git"
    - GRAVIS="$HOME/gravis"
    - TERM="dumb" // evita che gradle stampi "lo schifo"
  matrix: # crea una build a parte per ogni combinazione di ogni elemento di questa lista con ogni possibile OS specificato e architettura specificata.
    - *reference_jdk
    - JDK="adopt@1.8"
    - JDK="adopt@1.14"
    - JDK="adopt-openj9@1.11"
    - JDK="adopt-openj9@1.8"
    - JDK="adopt-openj9@1.14"

stages:
  - Compile
  - Kotlin Style Check
  - Complete Check # in questo modo prima eseguo lo stage "Complete Check" poi lo stage "test"
  - name: test
    if: 'commit_message !~ /\[\s*skip(?: |-|\.)test\s*\].*/' # in questo modo se qualcuno scrive un commit che nel testo del commit matcha la regex specificata, la fase di test viene saltata.
  - name: Delivery # creo uno stage chiamato "Delivery" che si attiva solo se il nome del possessore del repository che ha triggerato i jobs, è il mio.
    if: repo = fedeOx/deleteme-lss

_reference_machine: &reference_machine
  arch: *reference_arch
  os: *reference_os
  env: *reference_jdk

_workspace_name: &workspace_name
  compiled_env

_import_workspace: &import_workspace
  workspaces: # Lo stage sopra riuserà il workspace *workspace_name.
    use: *workspace_name

jobs: # consente di specificare condizioni per cui determinati job devono essere inclusi o esclusi
  exclude: # escludi le combinazioni in cui architetttura è arm64 e hanno come chiave di ambiente JDK="adopt-openj9@1.8" o JDK="adopt-openj9@1.14"
    - arch: arm64
      env: JDK="adopt-openj9@1.8"
    - arch: arm64
      env: JDK="adopt-openj9@1.14"
    - <<: *reference_machine # metti qui dentro la cosa puntata da _reference_machine e su quell'oggetto fai le modifiche indicate sotto (fai override dell'eventuale chiave "stage" con "stage: test")
      stage: test
  include: # dentro include ci posso andare ad indicare le cose che devono essere fatte nello specifico nei vari jobs diversi da "test".
    - <<: *reference_machine
      stage: Compile
      script: travis_retry sh ./gradlew compileKotlin --parallel
      workspaces: # Lo stage "Compile" in questo modo dovrebbe creare il workspace.
        create:
          name: *workspace_name
          paths: # quali percorsi inserire nel workspace, a noi interessa salvarci tutta la build_dir di travis (così evitiamo di ripetere ad ogni stage la build) e il file ".gradle" così evitiamo di dovercelo scaricare ad ogni stage.
            - "$TRAVIS_BUILD_DIR"
            - "$HOME/.gradle"
    - <<: *reference_machine
      stage: Kotlin Style Check
      <<: *import_workspace
      script: travis_retry sh ./gradlew detekt ktlintCheck --parallel
    - <<: *reference_machine
      stage: Complete Check # gli dico che questa include fa riferimento allo stage chiamato "check".
      <<: *import_workspace
      script:
        - travis_retry sh ./gradlew check
    - stage: Delivery #Indico che questo stage deve essere eseguito solo quando la modifica che lo ha triggerato è stata fatta su uno dei miei branch principali (es. master)
      script: 'true'

before_install:
  - travis_retry git clone --depth 1 $GRAVIS_REPO $GRAVIS
  - source $GRAVIS/install-jdk

install:
  - true

script:
  - travis_retry sh ./gradlew test